# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
    # specify the version you desire here
    - image: circleci/openjdk:8-jdk

    # Specify service dependencies here if necessary
    # CircleCI maintains a library of pre-built images
    # documented at https://circleci.com/docs/2.0/circleci-images/
    # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
    - checkout

    # Download and cache dependencies
    - restore_cache:
        keys:
        - v1-dependencies-{{ checksum "build.gradle" }}
        # fallback to using the latest cache if no exact match is found
        - v1-dependencies-

    - run: gradle dependencies

    - save_cache:
        paths:
        - ~/.gradle
        key: v1-dependencies-{{ checksum "build.gradle" }}

    # run tests!
    - run: gradle test

    - run: gradle build

  push_image:
    docker:
    # specify the version you desire here
    - image: circleci/openjdk:8-jdk

    # Specify service dependencies here if necessary
    # CircleCI maintains a library of pre-built images
    # documented at https://circleci.com/docs/2.0/circleci-images/
    # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
    - checkout

    # Download and cache dependencies
    - restore_cache:
        keys:
        - v1-dependencies-{{ checksum "build.gradle" }}
        # fallback to using the latest cache if no exact match is found
        - v1-dependencies-

    - run: gradle build

    - setup_remote_docker:
        docker_layer_caching: true

    - run:
        name: Install Docker client
        command: |
          set -x
          VER="17.03.0-ce"
          curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
          tar -xz -C /tmp -f /tmp/docker-$VER.tgz
          sudo mv /tmp/docker/* /usr/bin
    # build and push Docker image
    - run: |
        TAG=0.1.$CIRCLE_BUILD_NUM
        docker build -t adityachitre/taskr:$TAG .
        docker login -u $DOCKER_USER -p $DOCKER_PASS
        docker push adityachitre/taskr:$TAG
    - run:
        name: Save build number
        command: |
          echo ${CIRCLE_BUILD_NUM} > docker-build_number.txt
    - persist_to_workspace:
        root: ./
        paths:
          - k8s-*.yml
          - docker-build_number.txt

  deploy-to-staging:
    docker:
    - image: google/cloud-sdk:alpine
    steps:
    - attach_workspace:
        at: /tmp/workspace
    - run:
        name: Define build number
        command: |
          echo 'export CIRCLE_BUILD_NUM_DOCKER=${cat /tmp/workspace/docker-build_number.txt)' >> $BASH_ENV
          source $BASH_ENV
    - run:
        name: Install dependencies
        command: apk add --update --no-cache libintl gettext openjdk7-jre
    - run:
        name: Install Kubectl
        command: gcloud components install app-engine-java kubectl
    - run:
        name: Template k8s config
        command: for i in /tmp/workspace/k8s-*.yml; do envsubst < "$i" > $(basename "$i"); done
    - run:
        name: Deploy to staging
        command: |
          echo "$GCLOUD_SERVICE_KEY" > key.json # Google Cloud service account key
          gcloud auth activate-service-account --key-file key.json
          gcloud config set compute/zone australia-southeast1-a
          gcloud config set project taskr-217900
          gcloud container clusters get-credentials test-cluster --zone australia-southeast1-a
          kubectl apply -f k8s-deployment.yml
          kubectl rollout status deployment/taskr-deployment

workflows:
  version: 2
  continuous-delivery:
    jobs:
    - build
    - push_image:
        requires:
        - build
    - deploy-to-staging:
        requires:
        - push_image
        filters:
          branches:
            only: master
